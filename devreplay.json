[
  {
    "condition": [
      "\"${1:string.quoted.double.json}\": \"${2:string.quoted.double.json}\""
    ],
    "consequent": [
      "\"${1:string.quoted.double.json}\": \"${2:string.quoted.double.json}\",",
      "\"simple-git\": \"2.21.0\",",
      "\"source-code-tokenizer\": \"^0.1.5\",",
      "\"parse-diff\": \"^0.7.1\""
    ],
    "identifiers": [
      "lodash",
      "^4.17.20"
    ]
  },
  {
    "condition": [
      "${1:entity.name.function.ts}() {"
    ],
    "consequent": [
      "async ${1:entity.name.function.ts}() {"
    ],
    "identifiers": [
      "execute"
    ]
  },
  {
    "condition": [
      "// if (argv.init) {",
      "//     const files = arrayify(commander.args);",
      "//     if (files.length < 2) {",
      "//         console.log('Make pattern command require two files');",
      "//         return 1;",
      "//     }",
      "//     const patterns = makePatternsFromFiles(files[0], files[1]);",
      "//     if (patterns!== undefined) {",
      "//         patterns?.then(content => {",
      "//             console.log(JSON.stringify(content, undefined, 2));",
      "//         });",
      "//     }",
      "//     return 0;",
      "// }"
    ],
    "consequent": [
      "if (argv.init) {",
      "    const files = arrayify(commander.args);",
      "    const dirName = files[0];",
      "    let logLength = 10;",
      "    if (files.length > 1 && !isNaN(Number(files[1]))) {",
      "        logLength = Number(files[1]);",
      "    }",
      "    const project = new Project(dirName);",
      "    const diffs = await project.getDiff(logLength);",
      "    let allPatterns: Pattern[] = [];",
      "    for (const diff of diffs) {",
      "        const patterns = await makePatternsFromDiff(diff);",
      "        allPatterns = allPatterns.concat(patterns);",
      "    }",
      "    writePatternFile(allPatterns, dirName);",
      "",
      "    return 0;",
      "}"
    ],
    "identifiers": []
  },
  {
    "condition": [
      "import { ${1:variable.other.readwrite.alias.ts}, ${2:variable.other.readwrite.alias.ts} } from '${3:string.quoted.single.ts}';"
    ],
    "consequent": [
      "import { ${1:variable.other.readwrite.alias.ts}, ${2:variable.other.readwrite.alias.ts}, writeFileSync } from '${3:string.quoted.single.ts}';",
      "import { join } from 'path';"
    ],
    "identifiers": [
      "existsSync",
      "readFileSync",
      "fs"
    ]
  },
  {
    "condition": [
      "const patterns: ${1:entity.name.type.ts}[] = [];"
    ],
    "consequent": [
      "let patterns: ${1:entity.name.type.ts}[] = [];"
    ],
    "identifiers": [
      "Pattern"
    ]
  },
  {
    "condition": [
      "${1:variable.other.object.ts}.push(...${2:entity.name.function.ts}(${3:variable.other.readwrite.ts}));"
    ],
    "consequent": [
      "patterns = ${1:variable.other.object.ts}.concat(${2:entity.name.function.ts}(${3:variable.other.readwrite.ts}));"
    ],
    "identifiers": [
      "patterns",
      "readExtends",
      "extend"
    ]
  },
  {
    "condition": [
      "\"${1:string.quoted.double.json}\": \"${2:string.quoted.double.json}\""
    ],
    "consequent": [
      "\"${1:string.quoted.double.json}\": \"${2:string.quoted.double.json}\",",
      "\"simple-git\": \"2.21.0\",",
      "\"source-code-tokenizer\": \"^0.1.5\",",
      "\"parse-diff\": \"^0.7.1\""
    ],
    "identifiers": [
      "lodash",
      "^4.17.20"
    ]
  },
  {
    "condition": [
      "${1:entity.name.function.ts}() {"
    ],
    "consequent": [
      "async ${1:entity.name.function.ts}() {"
    ],
    "identifiers": [
      "execute"
    ]
  },
  {
    "condition": [
      "// if (argv.init) {",
      "//     const files = arrayify(commander.args);",
      "//     if (files.length < 2) {",
      "//         console.log('Make pattern command require two files');",
      "//         return 1;",
      "//     }",
      "//     const patterns = makePatternsFromFiles(files[0], files[1]);",
      "//     if (patterns!== undefined) {",
      "//         patterns?.then(content => {",
      "//             console.log(JSON.stringify(content, undefined, 2));",
      "//         });",
      "//     }",
      "//     return 0;",
      "// }"
    ],
    "consequent": [
      "if (argv.init) {",
      "    const files = arrayify(commander.args);",
      "    const dirName = files[0];",
      "    let logLength = 10;",
      "    if (files.length > 1 && !isNaN(Number(files[1]))) {",
      "        logLength = Number(files[1]);",
      "    }",
      "    const project = new Project(dirName);",
      "    const diffs = await project.getDiff(logLength);",
      "    let allPatterns: Pattern[] = [];",
      "    for (const diff of diffs) {",
      "        const patterns = await makePatternsFromDiff(diff);",
      "        allPatterns = allPatterns.concat(patterns);",
      "    }",
      "    writePatternFile(allPatterns, dirName);",
      "",
      "    return 0;",
      "}"
    ],
    "identifiers": []
  },
  {
    "condition": [
      "import { ${1:variable.other.readwrite.alias.ts}, ${2:variable.other.readwrite.alias.ts} } from '${3:string.quoted.single.ts}';"
    ],
    "consequent": [
      "import { ${1:variable.other.readwrite.alias.ts}, ${2:variable.other.readwrite.alias.ts}, writeFileSync } from '${3:string.quoted.single.ts}';",
      "import { join } from 'path';"
    ],
    "identifiers": [
      "existsSync",
      "readFileSync",
      "fs"
    ]
  },
  {
    "condition": [
      "const patterns: ${1:entity.name.type.ts}[] = [];"
    ],
    "consequent": [
      "let patterns: ${1:entity.name.type.ts}[] = [];"
    ],
    "identifiers": [
      "Pattern"
    ]
  },
  {
    "condition": [
      "${1:variable.other.object.ts}.push(...${2:entity.name.function.ts}(${3:variable.other.readwrite.ts}));"
    ],
    "consequent": [
      "patterns = ${1:variable.other.object.ts}.concat(${2:entity.name.function.ts}(${3:variable.other.readwrite.ts}));"
    ],
    "identifiers": [
      "patterns",
      "readExtends",
      "extend"
    ]
  },
  {
    "condition": [
      "\"${1:string.quoted.double.json}\": \"${2:string.quoted.double.json}\""
    ],
    "consequent": [
      "\"${1:string.quoted.double.json}\": \"${2:string.quoted.double.json}\",",
      "\"simple-git\": \"2.21.0\",",
      "\"source-code-tokenizer\": \"^0.1.5\",",
      "\"parse-diff\": \"^0.7.1\""
    ],
    "identifiers": [
      "lodash",
      "^4.17.20"
    ]
  },
  {
    "condition": [
      "${1:entity.name.function.ts}() {"
    ],
    "consequent": [
      "async ${1:entity.name.function.ts}() {"
    ],
    "identifiers": [
      "execute"
    ]
  },
  {
    "condition": [
      "// if (argv.init) {",
      "//     const files = arrayify(commander.args);",
      "//     if (files.length < 2) {",
      "//         console.log('Make pattern command require two files');",
      "//         return 1;",
      "//     }",
      "//     const patterns = makePatternsFromFiles(files[0], files[1]);",
      "//     if (patterns!== undefined) {",
      "//         patterns?.then(content => {",
      "//             console.log(JSON.stringify(content, undefined, 2));",
      "//         });",
      "//     }",
      "//     return 0;",
      "// }"
    ],
    "consequent": [
      "if (argv.init) {",
      "    const files = arrayify(commander.args);",
      "    const dirName = files[0];",
      "    let logLength = 10;",
      "    if (files.length > 1 && !isNaN(Number(files[1]))) {",
      "        logLength = Number(files[1]);",
      "    }",
      "    const project = new Project(dirName);",
      "    const diffs = await project.getDiff(logLength);",
      "    let allPatterns: Pattern[] = [];",
      "    for (const diff of diffs) {",
      "        const patterns = await makePatternsFromDiff(diff);",
      "        allPatterns = allPatterns.concat(patterns);",
      "    }",
      "    writePatternFile(allPatterns, dirName);",
      "",
      "    return 0;",
      "}"
    ],
    "identifiers": []
  },
  {
    "condition": [
      "import { ${1:variable.other.readwrite.alias.ts}, ${2:variable.other.readwrite.alias.ts} } from '${3:string.quoted.single.ts}';"
    ],
    "consequent": [
      "import { ${1:variable.other.readwrite.alias.ts}, ${2:variable.other.readwrite.alias.ts}, writeFileSync } from '${3:string.quoted.single.ts}';",
      "import { join } from 'path';"
    ],
    "identifiers": [
      "existsSync",
      "readFileSync",
      "fs"
    ]
  },
  {
    "condition": [
      "const patterns: ${1:entity.name.type.ts}[] = [];"
    ],
    "consequent": [
      "let patterns: ${1:entity.name.type.ts}[] = [];"
    ],
    "identifiers": [
      "Pattern"
    ]
  },
  {
    "condition": [
      "${1:variable.other.object.ts}.push(...${2:entity.name.function.ts}(${3:variable.other.readwrite.ts}));"
    ],
    "consequent": [
      "patterns = ${1:variable.other.object.ts}.concat(${2:entity.name.function.ts}(${3:variable.other.readwrite.ts}));"
    ],
    "identifiers": [
      "patterns",
      "readExtends",
      "extend"
    ]
  },
  {
    "condition": [
      "\"${1:string.quoted.double.json}\": \"${2:string.quoted.double.json}\""
    ],
    "consequent": [
      "\"${1:string.quoted.double.json}\": \"${2:string.quoted.double.json}\",",
      "\"simple-git\": \"2.21.0\",",
      "\"source-code-tokenizer\": \"^0.1.5\",",
      "\"parse-diff\": \"^0.7.1\""
    ],
    "identifiers": [
      "lodash",
      "^4.17.20"
    ]
  },
  {
    "condition": [
      "${1:entity.name.function.ts}() {"
    ],
    "consequent": [
      "async ${1:entity.name.function.ts}() {"
    ],
    "identifiers": [
      "execute"
    ]
  },
  {
    "condition": [
      "// if (argv.init) {",
      "//     const files = arrayify(commander.args);",
      "//     if (files.length < 2) {",
      "//         console.log('Make pattern command require two files');",
      "//         return 1;",
      "//     }",
      "//     const patterns = makePatternsFromFiles(files[0], files[1]);",
      "//     if (patterns!== undefined) {",
      "//         patterns?.then(content => {",
      "//             console.log(JSON.stringify(content, undefined, 2));",
      "//         });",
      "//     }",
      "//     return 0;",
      "// }"
    ],
    "consequent": [
      "if (argv.init) {",
      "    const files = arrayify(commander.args);",
      "    const dirName = files[0];",
      "    let logLength = 10;",
      "    if (files.length > 1 && !isNaN(Number(files[1]))) {",
      "        logLength = Number(files[1]);",
      "    }",
      "    const project = new Project(dirName);",
      "    const diffs = await project.getDiff(logLength);",
      "    let allPatterns: Pattern[] = [];",
      "    for (const diff of diffs) {",
      "        const patterns = await makePatternsFromDiff(diff);",
      "        allPatterns = allPatterns.concat(patterns);",
      "    }",
      "    writePatternFile(allPatterns, dirName);",
      "",
      "    return 0;",
      "}"
    ],
    "identifiers": []
  },
  {
    "condition": [
      "import { ${1:variable.other.readwrite.alias.ts} } from './rulemanage';"
    ],
    "consequent": [
      "import { ${1:variable.other.readwrite.alias.ts} } from './ruleManager';"
    ],
    "identifiers": [
      "readPatternFile"
    ]
  },
  {
    "condition": [
      "import { ${1:variable.other.readwrite.alias.ts}, ${2:variable.other.readwrite.alias.ts} } from '${3:string.quoted.single.ts}';"
    ],
    "consequent": [
      "import { ${1:variable.other.readwrite.alias.ts}, ${2:variable.other.readwrite.alias.ts}, writeFileSync } from '${3:string.quoted.single.ts}';",
      "import { join } from 'path';"
    ],
    "identifiers": [
      "existsSync",
      "readFileSync",
      "fs"
    ]
  },
  {
    "condition": [
      "const patterns: ${1:entity.name.type.ts}[] = [];"
    ],
    "consequent": [
      "let patterns: ${1:entity.name.type.ts}[] = [];"
    ],
    "identifiers": [
      "Pattern"
    ]
  },
  {
    "condition": [
      "${1:variable.other.object.ts}.push(...${2:entity.name.function.ts}(${3:variable.other.readwrite.ts}));"
    ],
    "consequent": [
      "patterns = ${1:variable.other.object.ts}.concat(${2:entity.name.function.ts}(${3:variable.other.readwrite.ts}));"
    ],
    "identifiers": [
      "patterns",
      "readExtends",
      "extend"
    ]
  },
  {
    "condition": [
      "\"${1:string.quoted.double.json}\": \"${2:string.quoted.double.json}\""
    ],
    "consequent": [
      "\"${1:string.quoted.double.json}\": \"${2:string.quoted.double.json}\",",
      "\"simple-git\": \"2.21.0\",",
      "\"source-code-tokenizer\": \"^0.1.5\",",
      "\"parse-diff\": \"^0.7.1\""
    ],
    "identifiers": [
      "lodash",
      "^4.17.20"
    ]
  },
  {
    "condition": [
      "${1:entity.name.function.ts}() {"
    ],
    "consequent": [
      "async ${1:entity.name.function.ts}() {"
    ],
    "identifiers": [
      "execute"
    ]
  },
  {
    "condition": [
      "// if (argv.init) {",
      "//     const files = arrayify(commander.args);",
      "//     if (files.length < 2) {",
      "//         console.log('Make pattern command require two files');",
      "//         return 1;",
      "//     }",
      "//     const patterns = makePatternsFromFiles(files[0], files[1]);",
      "//     if (patterns!== undefined) {",
      "//         patterns?.then(content => {",
      "//             console.log(JSON.stringify(content, undefined, 2));",
      "//         });",
      "//     }",
      "//     return 0;",
      "// }"
    ],
    "consequent": [
      "if (argv.init) {",
      "    const files = arrayify(commander.args);",
      "    const dirName = files[0];",
      "    let logLength = 10;",
      "    if (files.length > 1 && !isNaN(Number(files[1]))) {",
      "        logLength = Number(files[1]);",
      "    }",
      "    const project = new Project(dirName);",
      "    const diffs = await project.getDiff(logLength);",
      "    let allPatterns: Pattern[] = [];",
      "    for (const diff of diffs) {",
      "        const patterns = await makePatternsFromDiff(diff);",
      "        allPatterns = allPatterns.concat(patterns);",
      "    }",
      "    writePatternFile(allPatterns, dirName);",
      "",
      "    return 0;",
      "}"
    ],
    "identifiers": []
  },
  {
    "condition": [
      "import { ${1:variable.other.readwrite.alias.ts} } from './rulemanage';"
    ],
    "consequent": [
      "import { ${1:variable.other.readwrite.alias.ts} } from './ruleManager';"
    ],
    "identifiers": [
      "readPatternFile"
    ]
  },
  {
    "condition": [
      "import { ${1:variable.other.readwrite.alias.ts}, ${2:variable.other.readwrite.alias.ts} } from '${3:string.quoted.single.ts}';"
    ],
    "consequent": [
      "import { ${1:variable.other.readwrite.alias.ts}, ${2:variable.other.readwrite.alias.ts}, writeFileSync } from '${3:string.quoted.single.ts}';",
      "import { join } from 'path';"
    ],
    "identifiers": [
      "existsSync",
      "readFileSync",
      "fs"
    ]
  },
  {
    "condition": [
      "const patterns: ${1:entity.name.type.ts}[] = [];"
    ],
    "consequent": [
      "let patterns: ${1:entity.name.type.ts}[] = [];"
    ],
    "identifiers": [
      "Pattern"
    ]
  },
  {
    "condition": [
      "${1:variable.other.object.ts}.push(...${2:entity.name.function.ts}(${3:variable.other.readwrite.ts}));"
    ],
    "consequent": [
      "patterns = ${1:variable.other.object.ts}.concat(${2:entity.name.function.ts}(${3:variable.other.readwrite.ts}));"
    ],
    "identifiers": [
      "patterns",
      "readExtends",
      "extend"
    ]
  },
  {
    "condition": [
      "\"${1:string.quoted.double.json}\": \"1.5.0\","
    ],
    "consequent": [
      "\"${1:string.quoted.double.json}\": \"1.6.0\","
    ],
    "identifiers": [
      "version"
    ]
  },
  {
    "condition": [
      "\"${1:string.quoted.double.json}\": \"^6.0.0\","
    ],
    "consequent": [
      "\"${1:string.quoted.double.json}\": \"^6.2.0\","
    ],
    "identifiers": [
      "commander"
    ]
  },
  {
    "condition": [
      "\"${1:string.quoted.double.json}\": \"^2.0.1\","
    ],
    "consequent": [
      "\"${1:string.quoted.double.json}\": \"^2.0.3\","
    ],
    "identifiers": [
      "tslib"
    ]
  },
  {
    "condition": [
      "\"${1:string.quoted.double.json}\": \"^2.1.1\",",
      "\"${2:string.quoted.double.json}\": \"^4.17.19\""
    ],
    "consequent": [
      "\"${1:string.quoted.double.json}\": \"^2.2.0\",",
      "\"${2:string.quoted.double.json}\": \"^4.17.20\",",
      "\"simple-git\": \"2.21.0\",",
      "\"source-code-tokenizer\": \"^0.1.5\",",
      "\"parse-diff\": \"^0.7.1\""
    ],
    "identifiers": [
      "v8-compile-cache",
      "lodash"
    ]
  },
  {
    "condition": [
      "\"@types/node\": \"^14.0.27\","
    ],
    "consequent": [
      "\"@types/node\": \"^14.14.6\","
    ],
    "identifiers": []
  },
  {
    "condition": [
      "\"@typescript-eslint/eslint-plugin\": \"^3.8.0\",",
      "\"@typescript-eslint/parser\": \"^3.8.0\",",
      "\"${1:string.quoted.double.json}\": \"^7.6.0\",",
      "\"${2:string.quoted.double.json}\": \"^2.22.0\",",
      "\"${3:string.quoted.double.json}\": \"^30.2.1\","
    ],
    "consequent": [
      "\"@typescript-eslint/eslint-plugin\": \"^4.6.0\",",
      "\"@typescript-eslint/parser\": \"^4.6.0\",",
      "\"${1:string.quoted.double.json}\": \"^7.12.1\",",
      "\"${2:string.quoted.double.json}\": \"^2.22.1\",",
      "\"${3:string.quoted.double.json}\": \"^30.7.3\","
    ],
    "identifiers": [
      "eslint",
      "eslint-plugin-import",
      "eslint-plugin-jsdoc"
    ]
  },
  {
    "condition": [
      "\"${1:string.quoted.double.json}\": \"^3.9.7\""
    ],
    "consequent": [
      "\"${1:string.quoted.double.json}\": \"^4.0.5\""
    ],
    "identifiers": [
      "typescript"
    ]
  },
  {
    "condition": [
      "${1:entity.name.function.ts}() {"
    ],
    "consequent": [
      "async ${1:entity.name.function.ts}() {"
    ],
    "identifiers": [
      "execute"
    ]
  },
  {
    "condition": [
      "// if (argv.init) {",
      "//     const files = arrayify(commander.args);",
      "//     if (files.length < 2) {",
      "//         console.log('Make pattern command require two files');",
      "//         return 1;",
      "//     }",
      "//     const patterns = makePatternsFromFiles(files[0], files[1]);",
      "//     if (patterns!== undefined) {",
      "//         patterns?.then(content => {",
      "//             console.log(JSON.stringify(content, undefined, 2));",
      "//         });",
      "//     }",
      "//     return 0;",
      "// }"
    ],
    "consequent": [
      "if (argv.init) {",
      "    const files = arrayify(commander.args);",
      "    const dirName = files[0];",
      "    let logLength = 10;",
      "    if (files.length > 1 && !isNaN(Number(files[1]))) {",
      "        logLength = Number(files[1]);",
      "    }",
      "    const project = new Project(dirName);",
      "    const diffs = await project.getDiff(logLength);",
      "    let allPatterns: Pattern[] = [];",
      "    for (const diff of diffs) {",
      "        const patterns = await makePatternsFromDiff(diff);",
      "        allPatterns = allPatterns.concat(patterns);",
      "    }",
      "    writePatternFile(allPatterns, dirName);",
      "",
      "    return 0;",
      "}"
    ],
    "identifiers": []
  },
  {
    "condition": [
      "import { ${1:variable.other.readwrite.alias.ts} } from './rulemanage';"
    ],
    "consequent": [
      "import { ${1:variable.other.readwrite.alias.ts} } from './ruleManager';"
    ],
    "identifiers": [
      "readPatternFile"
    ]
  },
  {
    "condition": [
      "import { ${1:variable.other.readwrite.alias.ts}, ${2:variable.other.readwrite.alias.ts} } from '${3:string.quoted.single.ts}';"
    ],
    "consequent": [
      "import { ${1:variable.other.readwrite.alias.ts}, ${2:variable.other.readwrite.alias.ts}, writeFileSync } from '${3:string.quoted.single.ts}';",
      "import { join } from 'path';"
    ],
    "identifiers": [
      "existsSync",
      "readFileSync",
      "fs"
    ]
  },
  {
    "condition": [
      "const patterns: ${1:entity.name.type.ts}[] = [];"
    ],
    "consequent": [
      "let patterns: ${1:entity.name.type.ts}[] = [];"
    ],
    "identifiers": [
      "Pattern"
    ]
  },
  {
    "condition": [
      "${1:variable.other.object.ts}.push(...${2:entity.name.function.ts}(${3:variable.other.readwrite.ts}));"
    ],
    "consequent": [
      "patterns = ${1:variable.other.object.ts}.concat(${2:entity.name.function.ts}(${3:variable.other.readwrite.ts}));"
    ],
    "identifiers": [
      "patterns",
      "readExtends",
      "extend"
    ]
  },
  {
    "condition": [
      "\"plugin:@typescript-eslint/eslint-recommended\""
    ],
    "consequent": [
      "'plugin:@typescript-eslint/eslint-recommended'"
    ],
    "identifiers": []
  },
  {
    "condition": [
      "\"jsdoc\""
    ],
    "consequent": [
      "'jsdoc'"
    ],
    "identifiers": []
  },
  {
    "condition": [
      "\t\t\"semi\": \"error\",",
      "\t\t\"no-extra-semi\": \"warn\",",
      "\t\t\"curly\": \"warn\",",
      "\t\t\"quotes\": [\"error\", \"single\", { \"allowTemplateLiterals\": ${1:constant.language.boolean.true.js} } ],",
      "\t\t\"eqeqeq\": \"error\""
    ],
    "consequent": [
      "\t\t'semi': 'error',",
      "\t\t'no-extra-semi': 'warn',",
      "\t\t'curly': 'warn',",
      "\t\t'quotes': ['error', 'single', { 'allowTemplateLiterals': ${1:constant.language.boolean.true.js} } ],",
      "\t\t'eqeqeq': 'error'"
    ],
    "identifiers": [
      "true"
    ]
  },
  {
    "condition": [
      "}"
    ],
    "consequent": [
      "};"
    ],
    "identifiers": []
  },
  {
    "condition": [
      "\"${1:string.quoted.double.json}\": \"1.5.0\","
    ],
    "consequent": [
      "\"${1:string.quoted.double.json}\": \"1.6.0\","
    ],
    "identifiers": [
      "version"
    ]
  },
  {
    "condition": [
      "\"${1:string.quoted.double.json}\": \"^6.0.0\","
    ],
    "consequent": [
      "\"${1:string.quoted.double.json}\": \"^6.2.0\","
    ],
    "identifiers": [
      "commander"
    ]
  },
  {
    "condition": [
      "\"${1:string.quoted.double.json}\": \"^2.0.1\","
    ],
    "consequent": [
      "\"${1:string.quoted.double.json}\": \"^2.0.3\","
    ],
    "identifiers": [
      "tslib"
    ]
  },
  {
    "condition": [
      "\"${1:string.quoted.double.json}\": \"^2.1.1\",",
      "\"${2:string.quoted.double.json}\": \"^4.17.19\""
    ],
    "consequent": [
      "\"${1:string.quoted.double.json}\": \"^2.2.0\",",
      "\"${2:string.quoted.double.json}\": \"^4.17.20\",",
      "\"simple-git\": \"2.21.0\",",
      "\"source-code-tokenizer\": \"^0.1.5\",",
      "\"parse-diff\": \"^0.7.1\""
    ],
    "identifiers": [
      "v8-compile-cache",
      "lodash"
    ]
  },
  {
    "condition": [
      "\"@types/node\": \"^14.0.27\","
    ],
    "consequent": [
      "\"@types/node\": \"^14.14.6\","
    ],
    "identifiers": []
  },
  {
    "condition": [
      "\"@typescript-eslint/eslint-plugin\": \"^3.8.0\",",
      "\"@typescript-eslint/parser\": \"^3.8.0\",",
      "\"${1:string.quoted.double.json}\": \"^7.6.0\",",
      "\"${2:string.quoted.double.json}\": \"^2.22.0\",",
      "\"${3:string.quoted.double.json}\": \"^30.2.1\","
    ],
    "consequent": [
      "\"@typescript-eslint/eslint-plugin\": \"^4.6.0\",",
      "\"@typescript-eslint/parser\": \"^4.6.0\",",
      "\"${1:string.quoted.double.json}\": \"^7.12.1\",",
      "\"${2:string.quoted.double.json}\": \"^2.22.1\",",
      "\"${3:string.quoted.double.json}\": \"^30.7.3\","
    ],
    "identifiers": [
      "eslint",
      "eslint-plugin-import",
      "eslint-plugin-jsdoc"
    ]
  },
  {
    "condition": [
      "\"${1:string.quoted.double.json}\": \"^3.9.7\""
    ],
    "consequent": [
      "\"${1:string.quoted.double.json}\": \"^4.0.5\""
    ],
    "identifiers": [
      "typescript"
    ]
  },
  {
    "condition": [
      "${1:entity.name.function.ts}() {"
    ],
    "consequent": [
      "async ${1:entity.name.function.ts}() {"
    ],
    "identifiers": [
      "execute"
    ]
  },
  {
    "condition": [
      "// if (argv.init) {",
      "//     const files = arrayify(commander.args);",
      "//     if (files.length < 2) {",
      "//         console.log('Make pattern command require two files');",
      "//         return 1;",
      "//     }",
      "//     const patterns = makePatternsFromFiles(files[0], files[1]);",
      "//     if (patterns!== undefined) {",
      "//         patterns?.then(content => {",
      "//             console.log(JSON.stringify(content, undefined, 2));",
      "//         });",
      "//     }",
      "//     return 0;",
      "// }"
    ],
    "consequent": [
      "if (argv.init) {",
      "    const files = arrayify(commander.args);",
      "    const dirName = files[0];",
      "    let logLength = 10;",
      "    if (files.length > 1 && !isNaN(Number(files[1]))) {",
      "        logLength = Number(files[1]);",
      "    }",
      "    const project = new Project(dirName);",
      "    const diffs = await project.getDiff(logLength);",
      "    let allPatterns: Pattern[] = [];",
      "    for (const diff of diffs) {",
      "        const patterns = await makePatternsFromDiff(diff);",
      "        allPatterns = allPatterns.concat(patterns);",
      "    }",
      "    writePatternFile(allPatterns, dirName);",
      "",
      "    return 0;",
      "}"
    ],
    "identifiers": []
  },
  {
    "condition": [
      "import { ${1:variable.other.readwrite.alias.ts} } from './rulemanage';"
    ],
    "consequent": [
      "import { ${1:variable.other.readwrite.alias.ts} } from './ruleManager';"
    ],
    "identifiers": [
      "readPatternFile"
    ]
  },
  {
    "condition": [
      "import { ${1:variable.other.readwrite.alias.ts}, ${2:variable.other.readwrite.alias.ts} } from '${3:string.quoted.single.ts}';"
    ],
    "consequent": [
      "import { ${1:variable.other.readwrite.alias.ts}, ${2:variable.other.readwrite.alias.ts}, writeFileSync } from '${3:string.quoted.single.ts}';",
      "import { join } from 'path';"
    ],
    "identifiers": [
      "existsSync",
      "readFileSync",
      "fs"
    ]
  },
  {
    "condition": [
      "const patterns: ${1:entity.name.type.ts}[] = [];"
    ],
    "consequent": [
      "let patterns: ${1:entity.name.type.ts}[] = [];"
    ],
    "identifiers": [
      "Pattern"
    ]
  },
  {
    "condition": [
      "${1:variable.other.object.ts}.push(...${2:entity.name.function.ts}(${3:variable.other.readwrite.ts}));"
    ],
    "consequent": [
      "patterns = ${1:variable.other.object.ts}.concat(${2:entity.name.function.ts}(${3:variable.other.readwrite.ts}));"
    ],
    "identifiers": [
      "patterns",
      "readExtends",
      "extend"
    ]
  },
  {
    "condition": [
      "\"plugin:@typescript-eslint/eslint-recommended\""
    ],
    "consequent": [
      "'plugin:@typescript-eslint/eslint-recommended'"
    ],
    "identifiers": []
  },
  {
    "condition": [
      "\"jsdoc\""
    ],
    "consequent": [
      "'jsdoc'"
    ],
    "identifiers": []
  },
  {
    "condition": [
      "\t\t\"semi\": \"error\",",
      "\t\t\"no-extra-semi\": \"warn\",",
      "\t\t\"curly\": \"warn\",",
      "\t\t\"quotes\": [\"error\", \"single\", { \"allowTemplateLiterals\": ${1:constant.language.boolean.true.js} } ],",
      "\t\t\"eqeqeq\": \"error\""
    ],
    "consequent": [
      "\t\t'semi': 'error',",
      "\t\t'no-extra-semi': 'warn',",
      "\t\t'curly': 'warn',",
      "\t\t'quotes': ['error', 'single', { 'allowTemplateLiterals': ${1:constant.language.boolean.true.js} } ],",
      "\t\t'eqeqeq': 'error'"
    ],
    "identifiers": [
      "true"
    ]
  },
  {
    "condition": [
      "}"
    ],
    "consequent": [
      "};"
    ],
    "identifiers": []
  },
  {
    "condition": [
      "\"${1:string.quoted.double.json}\": \"1.5.0\","
    ],
    "consequent": [
      "\"${1:string.quoted.double.json}\": \"1.6.0\","
    ],
    "identifiers": [
      "version"
    ]
  },
  {
    "condition": [
      "\"${1:string.quoted.double.json}\": \"^6.0.0\","
    ],
    "consequent": [
      "\"${1:string.quoted.double.json}\": \"^6.2.0\","
    ],
    "identifiers": [
      "commander"
    ]
  },
  {
    "condition": [
      "\"${1:string.quoted.double.json}\": \"^2.0.1\","
    ],
    "consequent": [
      "\"${1:string.quoted.double.json}\": \"^2.0.3\","
    ],
    "identifiers": [
      "tslib"
    ]
  },
  {
    "condition": [
      "\"${1:string.quoted.double.json}\": \"^2.1.1\",",
      "\"${2:string.quoted.double.json}\": \"^4.17.19\""
    ],
    "consequent": [
      "\"${1:string.quoted.double.json}\": \"^2.2.0\",",
      "\"${2:string.quoted.double.json}\": \"^4.17.20\",",
      "\"simple-git\": \"2.21.0\",",
      "\"source-code-tokenizer\": \"^0.1.5\",",
      "\"parse-diff\": \"^0.7.1\""
    ],
    "identifiers": [
      "v8-compile-cache",
      "lodash"
    ]
  },
  {
    "condition": [
      "\"@types/node\": \"^14.0.27\","
    ],
    "consequent": [
      "\"@types/node\": \"^14.14.6\","
    ],
    "identifiers": []
  },
  {
    "condition": [
      "\"@typescript-eslint/eslint-plugin\": \"^3.8.0\",",
      "\"@typescript-eslint/parser\": \"^3.8.0\",",
      "\"${1:string.quoted.double.json}\": \"^7.6.0\",",
      "\"${2:string.quoted.double.json}\": \"^2.22.0\",",
      "\"${3:string.quoted.double.json}\": \"^30.2.1\","
    ],
    "consequent": [
      "\"@typescript-eslint/eslint-plugin\": \"^4.6.0\",",
      "\"@typescript-eslint/parser\": \"^4.6.0\",",
      "\"${1:string.quoted.double.json}\": \"^7.12.1\",",
      "\"${2:string.quoted.double.json}\": \"^2.22.1\",",
      "\"${3:string.quoted.double.json}\": \"^30.7.3\","
    ],
    "identifiers": [
      "eslint",
      "eslint-plugin-import",
      "eslint-plugin-jsdoc"
    ]
  },
  {
    "condition": [
      "\"${1:string.quoted.double.json}\": \"^3.9.7\""
    ],
    "consequent": [
      "\"${1:string.quoted.double.json}\": \"^4.0.5\""
    ],
    "identifiers": [
      "typescript"
    ]
  },
  {
    "condition": [
      "${1:entity.name.function.ts}() {"
    ],
    "consequent": [
      "async ${1:entity.name.function.ts}() {"
    ],
    "identifiers": [
      "execute"
    ]
  },
  {
    "condition": [
      "// if (argv.init) {",
      "//     const files = arrayify(commander.args);",
      "//     if (files.length < 2) {",
      "//         console.log('Make pattern command require two files');",
      "//         return 1;",
      "//     }",
      "//     const patterns = makePatternsFromFiles(files[0], files[1]);",
      "//     if (patterns!== undefined) {",
      "//         patterns?.then(content => {",
      "//             console.log(JSON.stringify(content, undefined, 2));",
      "//         });",
      "//     }",
      "//     return 0;",
      "// }"
    ],
    "consequent": [
      "if (argv.init) {",
      "    const files = arrayify(commander.args);",
      "    const dirName = files[0];",
      "    let logLength = 10;",
      "    if (files.length > 1 && !isNaN(Number(files[1]))) {",
      "        logLength = Number(files[1]);",
      "    }",
      "    const project = new Project(dirName);",
      "    const diffs = await project.getDiff(logLength);",
      "    let allPatterns: Pattern[] = [];",
      "    for (const diff of diffs) {",
      "        const patterns = await makePatternsFromDiff(diff);",
      "        allPatterns = allPatterns.concat(patterns);",
      "    }",
      "    writePatternFile(allPatterns, dirName);",
      "",
      "    return 0;",
      "}"
    ],
    "identifiers": []
  },
  {
    "condition": [
      "interface IExtend {"
    ],
    "consequent": [
      "interface Extends {"
    ],
    "identifiers": []
  },
  {
    "condition": [
      "export const ${1:variable.other.constant.ts}: IExtend = {"
    ],
    "consequent": [
      "export const ${1:variable.other.constant.ts}: Extends = {"
    ],
    "identifiers": [
      "extend"
    ]
  },
  {
    "condition": [
      "interface ISource {"
    ],
    "consequent": [
      "interface Source {"
    ],
    "identifiers": []
  },
  {
    "condition": [
      "export const ${1:variable.other.constant.ts}: ISource = {"
    ],
    "consequent": [
      "export const ${1:variable.other.constant.ts}: Source = {"
    ],
    "identifiers": [
      "sources"
    ]
  },
  {
    "condition": [
      "import { ${1:variable.other.readwrite.alias.ts} } from './rulemanage';"
    ],
    "consequent": [
      "import { ${1:variable.other.readwrite.alias.ts} } from './ruleManager';"
    ],
    "identifiers": [
      "readPatternFile"
    ]
  },
  {
    "condition": [
      "let lintoutputs: ${1:support.type.primitive.ts}[][] = [],",
      "    ${2:variable.other.readwrite.ts} = ${3:constant.numeric.decimal.ts},",
      "    ${4:variable.other.readwrite.ts} = ${3:constant.numeric.decimal.ts},",
      "    ${5:variable.other.readwrite.ts} = ${3:constant.numeric.decimal.ts},",
      "    ${6:variable.other.readwrite.ts} = ${3:constant.numeric.decimal.ts};"
    ],
    "consequent": [
      "const lintoutputs: ${1:support.type.primitive.ts}[][] = [];",
      "let ${2:variable.other.readwrite.ts} = ${3:constant.numeric.decimal.ts};",
      "let ${4:variable.other.readwrite.ts} = ${3:constant.numeric.decimal.ts};",
      "let ${5:variable.other.readwrite.ts} = ${3:constant.numeric.decimal.ts};",
      "let ${6:variable.other.readwrite.ts} = ${3:constant.numeric.decimal.ts};"
    ],
    "identifiers": [
      "string",
      "errorCount",
      "0",
      "warningCount",
      "informationCount",
      "hintCount"
    ]
  },
  {
    "condition": [
      "import { ${1:variable.other.readwrite.alias.ts}, ${2:variable.other.readwrite.alias.ts} } from '${3:string.quoted.single.ts}';"
    ],
    "consequent": [
      "import { ${1:variable.other.readwrite.alias.ts}, ${2:variable.other.readwrite.alias.ts}, writeFileSync } from '${3:string.quoted.single.ts}';",
      "import { join } from 'path';"
    ],
    "identifiers": [
      "existsSync",
      "readFileSync",
      "fs"
    ]
  },
  {
    "condition": [
      "const patterns: ${1:entity.name.type.ts}[] = [];"
    ],
    "consequent": [
      "let patterns: ${1:entity.name.type.ts}[] = [];"
    ],
    "identifiers": [
      "Pattern"
    ]
  },
  {
    "condition": [
      "${1:variable.other.object.ts}.push(...${2:entity.name.function.ts}(${3:variable.other.readwrite.ts}));"
    ],
    "consequent": [
      "patterns = ${1:variable.other.object.ts}.concat(${2:entity.name.function.ts}(${3:variable.other.readwrite.ts}));"
    ],
    "identifiers": [
      "patterns",
      "readExtends",
      "extend"
    ]
  },
  {
    "condition": [
      "\"plugin:@typescript-eslint/eslint-recommended\""
    ],
    "consequent": [
      "'plugin:@typescript-eslint/eslint-recommended'"
    ],
    "identifiers": []
  },
  {
    "condition": [
      "\"jsdoc\""
    ],
    "consequent": [
      "'jsdoc'"
    ],
    "identifiers": []
  },
  {
    "condition": [
      "\t\t\"semi\": \"error\",",
      "\t\t\"no-extra-semi\": \"warn\",",
      "\t\t\"curly\": \"warn\",",
      "\t\t\"quotes\": [\"error\", \"single\", { \"allowTemplateLiterals\": ${1:constant.language.boolean.true.js} } ],",
      "\t\t\"eqeqeq\": \"error\""
    ],
    "consequent": [
      "\t\t'semi': 'error',",
      "\t\t'no-extra-semi': 'warn',",
      "\t\t'curly': 'warn',",
      "\t\t'quotes': ['error', 'single', { 'allowTemplateLiterals': ${1:constant.language.boolean.true.js} } ],",
      "\t\t'eqeqeq': 'error'"
    ],
    "identifiers": [
      "true"
    ]
  },
  {
    "condition": [
      "}"
    ],
    "consequent": [
      "};"
    ],
    "identifiers": []
  },
  {
    "condition": [
      "\"${1:string.quoted.double.json}\": \"1.4.5\","
    ],
    "consequent": [
      "\"${1:string.quoted.double.json}\": \"1.6.0\","
    ],
    "identifiers": [
      "version"
    ]
  },
  {
    "condition": [
      "\"${1:string.quoted.double.json}\": \"^6.0.0\","
    ],
    "consequent": [
      "\"${1:string.quoted.double.json}\": \"^6.2.0\","
    ],
    "identifiers": [
      "commander"
    ]
  },
  {
    "condition": [
      "\"${1:string.quoted.double.json}\": \"^2.0.1\","
    ],
    "consequent": [
      "\"${1:string.quoted.double.json}\": \"^2.0.3\","
    ],
    "identifiers": [
      "tslib"
    ]
  },
  {
    "condition": [
      "\"${1:string.quoted.double.json}\": \"^2.1.1\",",
      "\"${2:string.quoted.double.json}\": \"^4.17.19\""
    ],
    "consequent": [
      "\"${1:string.quoted.double.json}\": \"^2.2.0\",",
      "\"${2:string.quoted.double.json}\": \"^4.17.20\",",
      "\"simple-git\": \"2.21.0\",",
      "\"source-code-tokenizer\": \"^0.1.5\",",
      "\"parse-diff\": \"^0.7.1\""
    ],
    "identifiers": [
      "v8-compile-cache",
      "lodash"
    ]
  },
  {
    "condition": [
      "\"@types/node\": \"^14.0.27\","
    ],
    "consequent": [
      "\"@types/node\": \"^14.14.6\","
    ],
    "identifiers": []
  },
  {
    "condition": [
      "\"@typescript-eslint/eslint-plugin\": \"^3.8.0\",",
      "\"@typescript-eslint/parser\": \"^3.8.0\",",
      "\"${1:string.quoted.double.json}\": \"^7.6.0\",",
      "\"${2:string.quoted.double.json}\": \"^2.22.0\",",
      "\"${3:string.quoted.double.json}\": \"^30.2.1\","
    ],
    "consequent": [
      "\"@typescript-eslint/eslint-plugin\": \"^4.6.0\",",
      "\"@typescript-eslint/parser\": \"^4.6.0\",",
      "\"${1:string.quoted.double.json}\": \"^7.12.1\",",
      "\"${2:string.quoted.double.json}\": \"^2.22.1\",",
      "\"${3:string.quoted.double.json}\": \"^30.7.3\","
    ],
    "identifiers": [
      "eslint",
      "eslint-plugin-import",
      "eslint-plugin-jsdoc"
    ]
  },
  {
    "condition": [
      "\"${1:string.quoted.double.json}\": \"^3.9.7\""
    ],
    "consequent": [
      "\"${1:string.quoted.double.json}\": \"^4.0.5\""
    ],
    "identifiers": [
      "typescript"
    ]
  },
  {
    "condition": [
      "${1:entity.name.function.ts}() {"
    ],
    "consequent": [
      "async ${1:entity.name.function.ts}() {"
    ],
    "identifiers": [
      "execute"
    ]
  },
  {
    "condition": [
      "// if (argv.init) {",
      "//     const files = arrayify(commander.args);",
      "//     if (files.length < 2) {",
      "//         console.log('Make pattern command require two files');",
      "//         return 1;",
      "//     }",
      "//     const patterns = makePatternsFromFiles(files[0], files[1]);",
      "//     if (patterns!== undefined) {",
      "//         patterns?.then(content => {",
      "//             console.log(JSON.stringify(content, undefined, 2));",
      "//         });",
      "//     }",
      "//     return 0;",
      "// }"
    ],
    "consequent": [
      "if (argv.init) {",
      "    const files = arrayify(commander.args);",
      "    const dirName = files[0];",
      "    let logLength = 10;",
      "    if (files.length > 1 && !isNaN(Number(files[1]))) {",
      "        logLength = Number(files[1]);",
      "    }",
      "    const project = new Project(dirName);",
      "    const diffs = await project.getDiff(logLength);",
      "    let allPatterns: Pattern[] = [];",
      "    for (const diff of diffs) {",
      "        const patterns = await makePatternsFromDiff(diff);",
      "        allPatterns = allPatterns.concat(patterns);",
      "    }",
      "    writePatternFile(allPatterns, dirName);",
      "",
      "    return 0;",
      "}"
    ],
    "identifiers": []
  },
  {
    "condition": [
      "interface IExtend {"
    ],
    "consequent": [
      "interface Extends {"
    ],
    "identifiers": []
  },
  {
    "condition": [
      "export const ${1:variable.other.constant.ts}: IExtend = {"
    ],
    "consequent": [
      "export const ${1:variable.other.constant.ts}: Extends = {"
    ],
    "identifiers": [
      "extend"
    ]
  },
  {
    "condition": [
      "interface ISource {"
    ],
    "consequent": [
      "interface Source {"
    ],
    "identifiers": []
  },
  {
    "condition": [
      "export const ${1:variable.other.constant.ts}: ISource = {"
    ],
    "consequent": [
      "export const ${1:variable.other.constant.ts}: Source = {"
    ],
    "identifiers": [
      "sources"
    ]
  },
  {
    "condition": [
      "import { ${1:variable.other.readwrite.alias.ts} } from './rulemanage';"
    ],
    "consequent": [
      "import { ${1:variable.other.readwrite.alias.ts} } from './ruleManager';"
    ],
    "identifiers": [
      "readPatternFile"
    ]
  },
  {
    "condition": [
      "let lintoutputs: ${1:support.type.primitive.ts}[][] = [],",
      "    ${2:variable.other.readwrite.ts} = ${3:constant.numeric.decimal.ts},",
      "    ${4:variable.other.readwrite.ts} = ${3:constant.numeric.decimal.ts},",
      "    ${5:variable.other.readwrite.ts} = ${3:constant.numeric.decimal.ts},",
      "    ${6:variable.other.readwrite.ts} = ${3:constant.numeric.decimal.ts};"
    ],
    "consequent": [
      "const lintoutputs: ${1:support.type.primitive.ts}[][] = [];",
      "let ${2:variable.other.readwrite.ts} = ${3:constant.numeric.decimal.ts};",
      "let ${4:variable.other.readwrite.ts} = ${3:constant.numeric.decimal.ts};",
      "let ${5:variable.other.readwrite.ts} = ${3:constant.numeric.decimal.ts};",
      "let ${6:variable.other.readwrite.ts} = ${3:constant.numeric.decimal.ts};"
    ],
    "identifiers": [
      "string",
      "errorCount",
      "0",
      "warningCount",
      "informationCount",
      "hintCount"
    ]
  },
  {
    "condition": [
      "import { ${1:variable.other.readwrite.alias.ts}, ${2:variable.other.readwrite.alias.ts} } from '${3:string.quoted.single.ts}';"
    ],
    "consequent": [
      "import { ${1:variable.other.readwrite.alias.ts}, ${2:variable.other.readwrite.alias.ts}, writeFileSync } from '${3:string.quoted.single.ts}';",
      "import { join } from 'path';"
    ],
    "identifiers": [
      "existsSync",
      "readFileSync",
      "fs"
    ]
  },
  {
    "condition": [
      "const patterns: ${1:entity.name.type.ts}[] = [];"
    ],
    "consequent": [
      "let patterns: ${1:entity.name.type.ts}[] = [];"
    ],
    "identifiers": [
      "Pattern"
    ]
  },
  {
    "condition": [
      "${1:variable.other.object.ts}.push(...${2:entity.name.function.ts}(${3:variable.other.readwrite.ts}));"
    ],
    "consequent": [
      "patterns = ${1:variable.other.object.ts}.concat(${2:entity.name.function.ts}(${3:variable.other.readwrite.ts}));"
    ],
    "identifiers": [
      "patterns",
      "readExtends",
      "extend"
    ]
  },
  {
    "condition": [
      "\"plugin:@typescript-eslint/eslint-recommended\""
    ],
    "consequent": [
      "'plugin:@typescript-eslint/eslint-recommended'"
    ],
    "identifiers": []
  },
  {
    "condition": [
      "\"jsdoc\""
    ],
    "consequent": [
      "'jsdoc'"
    ],
    "identifiers": []
  },
  {
    "condition": [
      "\t\t\"semi\": \"error\",",
      "\t\t\"no-extra-semi\": \"warn\",",
      "\t\t\"curly\": \"warn\",",
      "\t\t\"quotes\": [\"error\", \"single\", { \"allowTemplateLiterals\": ${1:constant.language.boolean.true.js} } ],",
      "\t\t\"eqeqeq\": \"error\""
    ],
    "consequent": [
      "\t\t'semi': 'error',",
      "\t\t'no-extra-semi': 'warn',",
      "\t\t'curly': 'warn',",
      "\t\t'quotes': ['error', 'single', { 'allowTemplateLiterals': ${1:constant.language.boolean.true.js} } ],",
      "\t\t'eqeqeq': 'error'"
    ],
    "identifiers": [
      "true"
    ]
  },
  {
    "condition": [
      "}"
    ],
    "consequent": [
      "};"
    ],
    "identifiers": []
  },
  {
    "condition": [
      "\"${1:string.quoted.double.json}\": \"1.4.5\","
    ],
    "consequent": [
      "\"${1:string.quoted.double.json}\": \"1.6.0\","
    ],
    "identifiers": [
      "version"
    ]
  },
  {
    "condition": [
      "\"${1:string.quoted.double.json}\": \"^6.0.0\","
    ],
    "consequent": [
      "\"${1:string.quoted.double.json}\": \"^6.2.0\","
    ],
    "identifiers": [
      "commander"
    ]
  },
  {
    "condition": [
      "\"${1:string.quoted.double.json}\": \"^2.0.1\","
    ],
    "consequent": [
      "\"${1:string.quoted.double.json}\": \"^2.0.3\","
    ],
    "identifiers": [
      "tslib"
    ]
  },
  {
    "condition": [
      "\"${1:string.quoted.double.json}\": \"^2.1.1\",",
      "\"${2:string.quoted.double.json}\": \"^4.17.19\""
    ],
    "consequent": [
      "\"${1:string.quoted.double.json}\": \"^2.2.0\",",
      "\"${2:string.quoted.double.json}\": \"^4.17.20\",",
      "\"simple-git\": \"2.21.0\",",
      "\"source-code-tokenizer\": \"^0.1.5\",",
      "\"parse-diff\": \"^0.7.1\""
    ],
    "identifiers": [
      "v8-compile-cache",
      "lodash"
    ]
  },
  {
    "condition": [
      "\"@types/node\": \"^13.13.4\","
    ],
    "consequent": [
      "\"@types/node\": \"^14.14.6\","
    ],
    "identifiers": []
  },
  {
    "condition": [
      "\"@typescript-eslint/eslint-plugin\": \"^2.30.0\",",
      "\"@typescript-eslint/parser\": \"^2.30.0\",",
      "\"${1:string.quoted.double.json}\": \"^6.8.0\",",
      "\"${2:string.quoted.double.json}\": \"^2.20.2\",",
      "\"${3:string.quoted.double.json}\": \"^24.0.0\","
    ],
    "consequent": [
      "\"@typescript-eslint/eslint-plugin\": \"^4.6.0\",",
      "\"@typescript-eslint/parser\": \"^4.6.0\",",
      "\"${1:string.quoted.double.json}\": \"^7.12.1\",",
      "\"${2:string.quoted.double.json}\": \"^2.22.1\",",
      "\"${3:string.quoted.double.json}\": \"^30.7.3\","
    ],
    "identifiers": [
      "eslint",
      "eslint-plugin-import",
      "eslint-plugin-jsdoc"
    ]
  },
  {
    "condition": [
      "\"${1:string.quoted.double.json}\": \"^3.8.3\""
    ],
    "consequent": [
      "\"${1:string.quoted.double.json}\": \"^4.0.5\""
    ],
    "identifiers": [
      "typescript"
    ]
  },
  {
    "condition": [
      "${1:entity.name.function.ts}() {"
    ],
    "consequent": [
      "async ${1:entity.name.function.ts}() {"
    ],
    "identifiers": [
      "execute"
    ]
  },
  {
    "condition": [
      "// if (argv.init) {",
      "//     const files = arrayify(commander.args);",
      "//     if (files.length < 2) {",
      "//         console.log('Make pattern command require two files');",
      "//         return 1;",
      "//     }",
      "//     const patterns = makePatternsFromFiles(files[0], files[1]);",
      "//     if (patterns!== undefined) {",
      "//         patterns?.then(content => {",
      "//             console.log(JSON.stringify(content, undefined, 2));",
      "//         });",
      "//     }",
      "//     return 0;",
      "// }"
    ],
    "consequent": [
      "if (argv.init) {",
      "    const files = arrayify(commander.args);",
      "    const dirName = files[0];",
      "    let logLength = 10;",
      "    if (files.length > 1 && !isNaN(Number(files[1]))) {",
      "        logLength = Number(files[1]);",
      "    }",
      "    const project = new Project(dirName);",
      "    const diffs = await project.getDiff(logLength);",
      "    let allPatterns: Pattern[] = [];",
      "    for (const diff of diffs) {",
      "        const patterns = await makePatternsFromDiff(diff);",
      "        allPatterns = allPatterns.concat(patterns);",
      "    }",
      "    writePatternFile(allPatterns, dirName);",
      "",
      "    return 0;",
      "}"
    ],
    "identifiers": []
  },
  {
    "condition": [
      "interface IExtend {"
    ],
    "consequent": [
      "interface Extends {"
    ],
    "identifiers": []
  },
  {
    "condition": [
      "export const ${1:variable.other.constant.ts}: IExtend = {"
    ],
    "consequent": [
      "export const ${1:variable.other.constant.ts}: Extends = {"
    ],
    "identifiers": [
      "extend"
    ]
  },
  {
    "condition": [
      "interface ISource {"
    ],
    "consequent": [
      "interface Source {"
    ],
    "identifiers": []
  },
  {
    "condition": [
      "export const ${1:variable.other.constant.ts}: ISource = {"
    ],
    "consequent": [
      "export const ${1:variable.other.constant.ts}: Source = {"
    ],
    "identifiers": [
      "sources"
    ]
  },
  {
    "condition": [
      "import { ${1:variable.other.readwrite.alias.ts} } from './rulemanage';"
    ],
    "consequent": [
      "import { ${1:variable.other.readwrite.alias.ts} } from './ruleManager';"
    ],
    "identifiers": [
      "readPatternFile"
    ]
  },
  {
    "condition": [
      "let lintoutputs: ${1:support.type.primitive.ts}[][] = [],",
      "    ${2:variable.other.readwrite.ts} = ${3:constant.numeric.decimal.ts},",
      "    ${4:variable.other.readwrite.ts} = ${3:constant.numeric.decimal.ts},",
      "    ${5:variable.other.readwrite.ts} = ${3:constant.numeric.decimal.ts},",
      "    ${6:variable.other.readwrite.ts} = ${3:constant.numeric.decimal.ts};"
    ],
    "consequent": [
      "const lintoutputs: ${1:support.type.primitive.ts}[][] = [];",
      "let ${2:variable.other.readwrite.ts} = ${3:constant.numeric.decimal.ts};",
      "let ${4:variable.other.readwrite.ts} = ${3:constant.numeric.decimal.ts};",
      "let ${5:variable.other.readwrite.ts} = ${3:constant.numeric.decimal.ts};",
      "let ${6:variable.other.readwrite.ts} = ${3:constant.numeric.decimal.ts};"
    ],
    "identifiers": [
      "string",
      "errorCount",
      "0",
      "warningCount",
      "informationCount",
      "hintCount"
    ]
  },
  {
    "condition": [
      "import { ${1:variable.other.readwrite.alias.ts}, ${2:variable.other.readwrite.alias.ts} } from '${3:string.quoted.single.ts}';"
    ],
    "consequent": [
      "import { ${1:variable.other.readwrite.alias.ts}, ${2:variable.other.readwrite.alias.ts}, writeFileSync } from '${3:string.quoted.single.ts}';",
      "import { join } from 'path';"
    ],
    "identifiers": [
      "existsSync",
      "readFileSync",
      "fs"
    ]
  },
  {
    "condition": [
      "const patterns: ${1:entity.name.type.ts}[] = [];"
    ],
    "consequent": [
      "let patterns: ${1:entity.name.type.ts}[] = [];"
    ],
    "identifiers": [
      "Pattern"
    ]
  },
  {
    "condition": [
      "${1:variable.other.object.ts}.push(...${2:entity.name.function.ts}(${3:variable.other.readwrite.ts}));"
    ],
    "consequent": [
      "patterns = ${1:variable.other.object.ts}.concat(${2:entity.name.function.ts}(${3:variable.other.readwrite.ts}));"
    ],
    "identifiers": [
      "patterns",
      "readExtends",
      "extend"
    ]
  }
]